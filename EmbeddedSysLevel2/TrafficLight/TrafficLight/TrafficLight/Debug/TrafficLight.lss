
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000530  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000a2  008000a2  00000606  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014db  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f8  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c37  00000000  00000000  000026c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076f  00000000  00000000  0000362c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb4  00000000  00000000  00003d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004a4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 96 02 	jmp	0x52c	; 0x52c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
    TrafficLight_voidInit();
  92:	0e 94 4e 00 	call	0x9c	; 0x9c <TrafficLight_voidInit>


    while (1) 
    {
        TrafficLight_voidStart();
  96:	0e 94 53 00 	call	0xa6	; 0xa6 <TrafficLight_voidStart>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x4>

0000009c <TrafficLight_voidInit>:
 * @brief initialized LED, UART And DIo
 * 
 */
void TrafficLight_voidInit(void)
{
    LED_voidInitialize();
  9c:	0e 94 a8 00 	call	0x150	; 0x150 <LED_voidInitialize>
    UART_ENInit();
  a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <UART_ENInit>
  a4:	08 95       	ret

000000a6 <TrafficLight_voidStart>:
/**
 * @brief update system while sending command "start - wait - stop"
 * 
 */
void TrafficLight_voidStart(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <TrafficLight_voidStart+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <TrafficLight_voidStart+0x8>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <TrafficLight_voidStart+0xa>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
    uint8_t *Pwait = "wait";

    uint8_t Command[6];
    uint8_t Flag = 0;

    SER_UARTvoidReceiveString(Command);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <SER_UARTvoidReceiveString>
    if (strcmp(Command, PStart) == 0)
  bc:	62 e6       	ldi	r22, 0x62	; 98
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	ce 01       	movw	r24, r28
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	0e 94 8d 02 	call	0x51a	; 0x51a <strcmp>
  c8:	89 2b       	or	r24, r25
  ca:	71 f4       	brne	.+28     	; 0xe8 <TrafficLight_voidStart+0x42>
    {
        Flag = START;
		SER_UARTvoidSendString("Green LED is on");
  cc:	88 e6       	ldi	r24, 0x68	; 104
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SER_UARTvoidSendString>
    }

    switch (Flag)
    {
    case 1:
        LED_voidLedOff(LED0);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_voidLedOff>
        LED_voidLedOff(LED1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_voidLedOff>
        LED_voidLedOn(LED2);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 b8 00 	call	0x170	; 0x170 <LED_voidLedOn>

        break;
  e6:	2b c0       	rjmp	.+86     	; 0x13e <TrafficLight_voidStart+0x98>
    if (strcmp(Command, PStart) == 0)
    {
        Flag = START;
		SER_UARTvoidSendString("Green LED is on");
    }
    else if (strcmp(Command, Pstop) == 0)
  e8:	68 e7       	ldi	r22, 0x78	; 120
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	0e 94 8d 02 	call	0x51a	; 0x51a <strcmp>
  f4:	89 2b       	or	r24, r25
  f6:	71 f4       	brne	.+28     	; 0x114 <TrafficLight_voidStart+0x6e>
    {
        Flag = STOP;
		SER_UARTvoidSendString("Red LED is on");
  f8:	8d e7       	ldi	r24, 0x7D	; 125
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SER_UARTvoidSendString>
        LED_voidLedOff(LED1);
        LED_voidLedOn(LED2);

        break;
    case 2:
        LED_voidLedOff(LED1);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_voidLedOff>
        LED_voidLedOff(LED2);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_voidLedOff>
        LED_voidLedOn(LED0);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 b8 00 	call	0x170	; 0x170 <LED_voidLedOn>

        break;
 112:	15 c0       	rjmp	.+42     	; 0x13e <TrafficLight_voidStart+0x98>
    else if (strcmp(Command, Pstop) == 0)
    {
        Flag = STOP;
		SER_UARTvoidSendString("Red LED is on");
    }
    else if (strcmp(Command, Pwait) == 0)
 114:	6b e8       	ldi	r22, 0x8B	; 139
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 8d 02 	call	0x51a	; 0x51a <strcmp>
 120:	89 2b       	or	r24, r25
 122:	69 f4       	brne	.+26     	; 0x13e <TrafficLight_voidStart+0x98>
    {
        Flag = WAIT;
		SER_UARTvoidSendString("Yellow LED is on");
 124:	80 e9       	ldi	r24, 0x90	; 144
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SER_UARTvoidSendString>
        LED_voidLedOff(LED2);
        LED_voidLedOn(LED0);

        break;
    case 3:
        LED_voidLedOff(LED0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_voidLedOff>
        LED_voidLedOff(LED2);
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_voidLedOff>
        LED_voidLedOn(LED1);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 b8 00 	call	0x170	; 0x170 <LED_voidLedOn>

        break;
    default:
        break;
    }
 13e:	26 96       	adiw	r28, 0x06	; 6
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <LED_voidInitialize>:
 * @brief initialized Led Direction and connection Type
 * 
 */
void LED_voidInitialize(void)
{
    DIO_voidSetPinDirection(LED_0_PORT, LED_0_PIN, OUTPUT);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LED_1_PORT, LED_0_PIN, OUTPUT);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LED_2_PORT, LED_0_PIN, OUTPUT);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_voidSetPinDirection>
 16e:	08 95       	ret

00000170 <LED_voidLedOn>:
 * 
 * @param led_num Led Numb
 */
void LED_voidLedOn(uint8_t led_num)
{
    if (led_num == LED0)
 170:	81 11       	cpse	r24, r1
 172:	05 c0       	rjmp	.+10     	; 0x17e <LED_voidLedOn+0xe>
    {
#if (LED_0_CONNECTION == FORWARD)
        {
            DIO_voidSetPinValue(LED_0_PORT, LED_0_PIN, HIGH);
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
 17c:	08 95       	ret
            DIO_voidSetPinValue(LED_0_PORT, LED_0_PIN, LOW);
        }
#endif
    }

    if (led_num == LED1)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	31 f4       	brne	.+12     	; 0x18e <LED_voidLedOn+0x1e>
    {
#if (LED_1_CONNECTION == FORWARD)
        {
            DIO_voidSetPinValue(LED_1_PORT, LED_1_PIN, HIGH);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
 18c:	08 95       	ret
            DIO_voidSetPinValue(LED_1_PORT, LED_1_PIN, LOW);
        }
#endif
    }

    if (led_num == LED2)
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	29 f4       	brne	.+10     	; 0x19c <LED_voidLedOn+0x2c>
    {
#if (LED_2_CONNECTION == FORWARD)
        {
            DIO_voidSetPinValue(LED_2_PORT, LED_2_PIN, HIGH);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
 19c:	08 95       	ret

0000019e <LED_voidLedOff>:
 * 
 * @param led_num Led Numb
 */
void LED_voidLedOff(uint8_t led_num)
{
    if (led_num == LED0)
 19e:	81 11       	cpse	r24, r1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <LED_voidLedOff+0xe>
    {
#if (LED_0_CONNECTION == FORWARD)
        {
            DIO_voidSetPinValue(LED_0_PORT, LED_0_PIN, LOW);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
 1aa:	08 95       	ret
            DIO_voidSetPinValue(LED_0_PORT, LED_0_PIN, HIGH);
        }
#endif
    }

    if (led_num == LED1)
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	31 f4       	brne	.+12     	; 0x1bc <LED_voidLedOff+0x1e>
    {
#if (LED_1_CONNECTION == FORWARD)
        {
            DIO_voidSetPinValue(LED_1_PORT, LED_1_PIN, LOW);
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
 1ba:	08 95       	ret
            DIO_voidSetPinValue(LED_1_PORT, LED_1_PIN, HIGH);
        }
#endif
    }

    if (led_num == LED2)
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	29 f4       	brne	.+10     	; 0x1ca <LED_voidLedOff+0x2c>
    {
#if (LED_2_CONNECTION == FORWARD)
        {
            DIO_voidSetPinValue(LED_2_PORT, LED_2_PIN, LOW);
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
 1ca:	08 95       	ret

000001cc <DIO_voidSetPinValue>:
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    if (EN_Value == LOW)
 1cc:	41 11       	cpse	r20, r1
 1ce:	3c c0       	rjmp	.+120    	; 0x248 <DIO_voidSetPinValue+0x7c>
    {
        switch (EN_Port)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	99 f0       	breq	.+38     	; 0x1fa <DIO_voidSetPinValue+0x2e>
 1d4:	28 f0       	brcs	.+10     	; 0x1e0 <DIO_voidSetPinValue+0x14>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	e9 f0       	breq	.+58     	; 0x214 <DIO_voidSetPinValue+0x48>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	41 f1       	breq	.+80     	; 0x22e <DIO_voidSetPinValue+0x62>
 1de:	6e c0       	rjmp	.+220    	; 0x2bc <DIO_voidSetPinValue+0xf0>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_voidSetPinValue+0x20>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_voidSetPinValue+0x1c>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8b bb       	out	0x1b, r24	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_Port)
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
            break;
 1f8:	08 95       	ret
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinValue+0x3a>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinValue+0x36>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 210:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
            break;
 212:	08 95       	ret
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0x54>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0x50>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 22a:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
            break;
 22c:	08 95       	ret
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_voidSetPinValue+0x6e>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_voidSetPinValue+0x6a>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 244:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
            break;
 246:	08 95       	ret
        default:
            state = E_DIOValue;
            break;
        }
    }
    else if (EN_Value == HIGH)
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	d1 f5       	brne	.+116    	; 0x2c0 <DIO_voidSetPinValue+0xf4>
    {
        switch (EN_Port)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	91 f0       	breq	.+36     	; 0x274 <DIO_voidSetPinValue+0xa8>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_voidSetPinValue+0x90>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	d9 f0       	breq	.+54     	; 0x28c <DIO_voidSetPinValue+0xc0>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	29 f1       	breq	.+74     	; 0x2a4 <DIO_voidSetPinValue+0xd8>
 25a:	34 c0       	rjmp	.+104    	; 0x2c4 <DIO_voidSetPinValue+0xf8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
 25c:	2b b3       	in	r18, 0x1b	; 27
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_voidSetPinValue+0x9c>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_voidSetPinValue+0x98>
 26c:	82 2b       	or	r24, r18
 26e:	8b bb       	out	0x1b, r24	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 270:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_Port)
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
            break;
 272:	08 95       	ret
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
 274:	28 b3       	in	r18, 0x18	; 24
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_voidSetPinValue+0xb4>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_voidSetPinValue+0xb0>
 284:	82 2b       	or	r24, r18
 286:	88 bb       	out	0x18, r24	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 288:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
            break;
 28a:	08 95       	ret
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinValue+0xcc>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinValue+0xc8>
 29c:	82 2b       	or	r24, r18
 29e:	85 bb       	out	0x15, r24	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 2a0:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
            break;
 2a2:	08 95       	ret
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPinValue+0xe4>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPinValue+0xe0>
 2b4:	82 2b       	or	r24, r18
 2b6:	82 bb       	out	0x12, r24	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 2b8:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
            break;
 2ba:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
            break;
        default:
            state = E_DIOValue;
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
            break;
        default:
            state = E_DIOValue;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return state;
} /* DIO_voidSetPinValue */
 2c6:	08 95       	ret

000002c8 <DIO_voidSetPinDirection>:
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    if (EN_Direction == INPUT)
 2c8:	41 11       	cpse	r20, r1
 2ca:	3c c0       	rjmp	.+120    	; 0x344 <DIO_voidSetPinDirection+0x7c>
    {
        switch (EN_port)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	99 f0       	breq	.+38     	; 0x2f6 <DIO_voidSetPinDirection+0x2e>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <DIO_voidSetPinDirection+0x14>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	e9 f0       	breq	.+58     	; 0x310 <DIO_voidSetPinDirection+0x48>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	41 f1       	breq	.+80     	; 0x32a <DIO_voidSetPinDirection+0x62>
 2da:	6e c0       	rjmp	.+220    	; 0x3b8 <DIO_voidSetPinDirection+0xf0>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
 2dc:	2a b3       	in	r18, 0x1a	; 26
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_voidSetPinDirection+0x20>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_voidSetPinDirection+0x1c>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 2f2:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
 2f4:	08 95       	ret
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
 2f6:	27 b3       	in	r18, 0x17	; 23
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_voidSetPinDirection+0x3a>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_voidSetPinDirection+0x36>
 306:	80 95       	com	r24
 308:	82 23       	and	r24, r18
 30a:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 30c:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
 30e:	08 95       	ret
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
 310:	24 b3       	in	r18, 0x14	; 20
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_voidSetPinDirection+0x54>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_voidSetPinDirection+0x50>
 320:	80 95       	com	r24
 322:	82 23       	and	r24, r18
 324:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 326:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
 328:	08 95       	ret
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
 32a:	21 b3       	in	r18, 0x11	; 17
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_voidSetPinDirection+0x6e>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_voidSetPinDirection+0x6a>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 340:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
 342:	08 95       	ret
        default:
            state = E_DIODirec;
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	d1 f5       	brne	.+116    	; 0x3bc <DIO_voidSetPinDirection+0xf4>
    {
        switch (EN_port)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	91 f0       	breq	.+36     	; 0x370 <DIO_voidSetPinDirection+0xa8>
 34c:	28 f0       	brcs	.+10     	; 0x358 <DIO_voidSetPinDirection+0x90>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	d9 f0       	breq	.+54     	; 0x388 <DIO_voidSetPinDirection+0xc0>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	29 f1       	breq	.+74     	; 0x3a0 <DIO_voidSetPinDirection+0xd8>
 356:	34 c0       	rjmp	.+104    	; 0x3c0 <DIO_voidSetPinDirection+0xf8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 358:	2a b3       	in	r18, 0x1a	; 26
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_voidSetPinDirection+0x9c>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_voidSetPinDirection+0x98>
 368:	82 2b       	or	r24, r18
 36a:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 36c:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
 36e:	08 95       	ret
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 370:	27 b3       	in	r18, 0x17	; 23
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_voidSetPinDirection+0xb4>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_voidSetPinDirection+0xb0>
 380:	82 2b       	or	r24, r18
 382:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 384:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
 386:	08 95       	ret
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 388:	24 b3       	in	r18, 0x14	; 20
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_voidSetPinDirection+0xcc>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_voidSetPinDirection+0xc8>
 398:	82 2b       	or	r24, r18
 39a:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 39c:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
 39e:	08 95       	ret
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 3a0:	21 b3       	in	r18, 0x11	; 17
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_voidSetPinDirection+0xe4>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_voidSetPinDirection+0xe0>
 3b0:	82 2b       	or	r24, r18
 3b2:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 3b4:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
 3b6:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return state;
} /* DIO_voidSetPinDirection */
 3c2:	08 95       	ret

000003c4 <UART_ENInit>:
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
    UART_voidRXInterruptEnable();
    gPrece_str = Str;
}
 3c4:	80 b5       	in	r24, 0x20	; 32
 3c6:	8f 77       	andi	r24, 0x7F	; 127
 3c8:	80 bd       	out	0x20, r24	; 32
 3ca:	10 bc       	out	0x20, r1	; 32
 3cc:	83 e3       	ldi	r24, 0x33	; 51
 3ce:	89 b9       	out	0x09, r24	; 9
 3d0:	59 98       	cbi	0x0b, 1	; 11
 3d2:	80 b5       	in	r24, 0x20	; 32
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	80 bd       	out	0x20, r24	; 32
 3d8:	80 b5       	in	r24, 0x20	; 32
 3da:	8f 7e       	andi	r24, 0xEF	; 239
 3dc:	80 bd       	out	0x20, r24	; 32
 3de:	80 b5       	in	r24, 0x20	; 32
 3e0:	8f 7d       	andi	r24, 0xDF	; 223
 3e2:	80 bd       	out	0x20, r24	; 32
 3e4:	80 b5       	in	r24, 0x20	; 32
 3e6:	80 68       	ori	r24, 0x80	; 128
 3e8:	80 bd       	out	0x20, r24	; 32
 3ea:	80 b5       	in	r24, 0x20	; 32
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	80 bd       	out	0x20, r24	; 32
 3f0:	80 b5       	in	r24, 0x20	; 32
 3f2:	84 60       	ori	r24, 0x04	; 4
 3f4:	80 bd       	out	0x20, r24	; 32
 3f6:	52 98       	cbi	0x0a, 2	; 10
 3f8:	54 9a       	sbi	0x0a, 4	; 10
 3fa:	53 9a       	sbi	0x0a, 3	; 10
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret

00000400 <UART_ENSendData>:
 400:	5d 9b       	sbis	0x0b, 5	; 11
 402:	fe cf       	rjmp	.-4      	; 0x400 <UART_ENSendData>
 404:	8c b9       	out	0x0c, r24	; 12
 406:	08 95       	ret

00000408 <UART_u8ReceiveData>:
 408:	5f 9b       	sbis	0x0b, 7	; 11
 40a:	fe cf       	rjmp	.-4      	; 0x408 <UART_u8ReceiveData>
 40c:	8c b1       	in	r24, 0x0c	; 12
 40e:	08 95       	ret

00000410 <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	8f 93       	push	r24
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
 420:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 424:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <gPsend_str>
 428:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <gPsend_str+0x1>
 42c:	e8 0f       	add	r30, r24
 42e:	f1 1d       	adc	r31, r1
 430:	80 81       	ld	r24, Z
 432:	88 23       	and	r24, r24
 434:	39 f0       	breq	.+14     	; 0x444 <__vector_15+0x34>
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
    UDR = Data;
 436:	8c b9       	out	0x0c, r24	; 12
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    {
        UART_ENSendNoBlock(gPsend_str[i]);
        i++;
 438:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 442:	05 c0       	rjmp	.+10     	; 0x44e <__vector_15+0x3e>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        gFlag = 1;
 44a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gFlag>
    }
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	8f 91       	pop	r24
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 470:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(uint8_t *Data)
{
    return UDR;
 474:	9c b1       	in	r25, 0x0c	; 12
 * 
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 476:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <gPrece_str>
 47a:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <gPrece_str+0x1>
 47e:	e8 0f       	add	r30, r24
 480:	f1 1d       	adc	r31, r1
 482:	90 83       	st	Z, r25
    i++;
 484:	8f 5f       	subi	r24, 0xFF	; 255
    if (i > 98)
 486:	83 36       	cpi	r24, 0x63	; 99
 488:	18 f4       	brcc	.+6      	; 0x490 <__vector_13+0x32>
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
    i++;
 48a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__vector_13+0x36>
    if (i > 98)
        i = 0;
 490:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end>
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	8c 01       	movw	r16, r24
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
 4ae:	fc 01       	movw	r30, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	88 23       	and	r24, r24
 4b4:	51 f0       	breq	.+20     	; 0x4ca <SER_UARTvoidSendString+0x24>
 4b6:	c0 e0       	ldi	r28, 0x00	; 0
    {
        UART_ENSendData(Str[i]);
 4b8:	0e 94 00 02 	call	0x400	; 0x400 <UART_ENSendData>
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
 4bc:	cf 5f       	subi	r28, 0xFF	; 255
 4be:	f8 01       	movw	r30, r16
 4c0:	ec 0f       	add	r30, r28
 4c2:	f1 1d       	adc	r31, r1
 4c4:	80 81       	ld	r24, Z
 4c6:	81 11       	cpse	r24, r1
 4c8:	f7 cf       	rjmp	.-18     	; 0x4b8 <SER_UARTvoidSendString+0x12>
    {
        UART_ENSendData(Str[i]);
    }
     UART_ENSendData('\r');
 4ca:	8d e0       	ldi	r24, 0x0D	; 13
 4cc:	0e 94 00 02 	call	0x400	; 0x400 <UART_ENSendData>
}
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	08 95       	ret

000004d8 <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	7c 01       	movw	r14, r24
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
 4e4:	0e 94 04 02 	call	0x408	; 0x408 <UART_u8ReceiveData>
 4e8:	f7 01       	movw	r30, r14
 4ea:	80 83       	st	Z, r24
    while (Str[i] != '\r')
 4ec:	8d 30       	cpi	r24, 0x0D	; 13
 4ee:	61 f0       	breq	.+24     	; 0x508 <SER_UARTvoidReceiveString+0x30>
 4f0:	c0 e0       	ldi	r28, 0x00	; 0
    {
        i++;
 4f2:	cf 5f       	subi	r28, 0xFF	; 255
        Str[i] = UART_u8ReceiveData();
 4f4:	87 01       	movw	r16, r14
 4f6:	0c 0f       	add	r16, r28
 4f8:	11 1d       	adc	r17, r1
 4fa:	0e 94 04 02 	call	0x408	; 0x408 <UART_u8ReceiveData>
 4fe:	f8 01       	movw	r30, r16
 500:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '\r')
 502:	8d 30       	cpi	r24, 0x0D	; 13
 504:	b1 f7       	brne	.-20     	; 0x4f2 <SER_UARTvoidReceiveString+0x1a>
 506:	01 c0       	rjmp	.+2      	; 0x50a <SER_UARTvoidReceiveString+0x32>
 508:	87 01       	movw	r16, r14
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = '\0';
 50a:	f8 01       	movw	r30, r16
 50c:	10 82       	st	Z, r1
}
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	08 95       	ret

0000051a <strcmp>:
 51a:	fb 01       	movw	r30, r22
 51c:	dc 01       	movw	r26, r24
 51e:	8d 91       	ld	r24, X+
 520:	01 90       	ld	r0, Z+
 522:	80 19       	sub	r24, r0
 524:	01 10       	cpse	r0, r1
 526:	d9 f3       	breq	.-10     	; 0x51e <strcmp+0x4>
 528:	99 0b       	sbc	r25, r25
 52a:	08 95       	ret

0000052c <_exit>:
 52c:	f8 94       	cli

0000052e <__stop_program>:
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stop_program>

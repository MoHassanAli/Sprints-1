
MasterSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000484  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d1  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8c  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d0d  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  000033a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fb  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d30  00000000  00000000  00003f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004c97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 40 02 	jmp	0x480	; 0x480 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "SPI_int.h"
#include "SER_UART_int.h"
#include "SER_SPI_int.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	cf 5f       	subi	r28, 0xFF	; 255
  9c:	d1 09       	sbc	r29, r1
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
    uint8_t str[255];

    SER_SPIvoidInitPinMaster();
  a8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SER_SPIvoidInitPinMaster>
    DIO_voidSetPinValue(PORT_B, PIN7, LOW);
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	67 e0       	ldi	r22, 0x07	; 7
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_voidSetPinValue>
	
	
	DIO_voidSetPinDirection(PORT_D, PIN0, INPUT);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_D, PIN1, OUTPUT);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_voidSetPinDirection>
	
    
    UART_ENInit();
  ca:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <UART_ENInit>
    SPI_ENMasterInit();
  ce:	0e 94 6e 01 	call	0x2dc	; 0x2dc <SPI_ENMasterInit>

    while (1)
    {
        SER_UARTvoidReceiveString(str);
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 1f 02 	call	0x43e	; 0x43e <SER_UARTvoidReceiveString>
		
        SER_SPIvoidSendString(str);
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SER_SPIvoidSendString>
  e2:	f7 cf       	rjmp	.-18     	; 0xd2 <main+0x40>

000000e4 <DIO_voidSetPinValue>:
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    if (EN_Value == LOW)
  e4:	41 11       	cpse	r20, r1
  e6:	3c c0       	rjmp	.+120    	; 0x160 <DIO_voidSetPinValue+0x7c>
    {
        switch (EN_Port)
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	99 f0       	breq	.+38     	; 0x112 <DIO_voidSetPinValue+0x2e>
  ec:	28 f0       	brcs	.+10     	; 0xf8 <DIO_voidSetPinValue+0x14>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	e9 f0       	breq	.+58     	; 0x12c <DIO_voidSetPinValue+0x48>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	41 f1       	breq	.+80     	; 0x146 <DIO_voidSetPinValue+0x62>
  f6:	6e c0       	rjmp	.+220    	; 0x1d4 <DIO_voidSetPinValue+0xf0>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
  f8:	2b b3       	in	r18, 0x1b	; 27
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinValue+0x20>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinValue+0x1c>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	8b bb       	out	0x1b, r24	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 10e:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_Port)
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
            break;
 110:	08 95       	ret
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
 112:	28 b3       	in	r18, 0x18	; 24
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinValue+0x3a>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinValue+0x36>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	88 bb       	out	0x18, r24	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 128:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
            break;
 12a:	08 95       	ret
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_voidSetPinValue+0x54>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_voidSetPinValue+0x50>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	85 bb       	out	0x15, r24	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 142:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
            break;
 144:	08 95       	ret
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
 146:	22 b3       	in	r18, 0x12	; 18
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_voidSetPinValue+0x6e>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_voidSetPinValue+0x6a>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	82 bb       	out	0x12, r24	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 15c:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
            break;
 15e:	08 95       	ret
        default:
            state = E_DIOValue;
            break;
        }
    }
    else if (EN_Value == HIGH)
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	d1 f5       	brne	.+116    	; 0x1d8 <DIO_voidSetPinValue+0xf4>
    {
        switch (EN_Port)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	91 f0       	breq	.+36     	; 0x18c <DIO_voidSetPinValue+0xa8>
 168:	28 f0       	brcs	.+10     	; 0x174 <DIO_voidSetPinValue+0x90>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	d9 f0       	breq	.+54     	; 0x1a4 <DIO_voidSetPinValue+0xc0>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	29 f1       	breq	.+74     	; 0x1bc <DIO_voidSetPinValue+0xd8>
 172:	34 c0       	rjmp	.+104    	; 0x1dc <DIO_voidSetPinValue+0xf8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
 174:	2b b3       	in	r18, 0x1b	; 27
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_voidSetPinValue+0x9c>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_voidSetPinValue+0x98>
 184:	82 2b       	or	r24, r18
 186:	8b bb       	out	0x1b, r24	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 188:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_Port)
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
            break;
 18a:	08 95       	ret
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
 18c:	28 b3       	in	r18, 0x18	; 24
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinValue+0xb4>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinValue+0xb0>
 19c:	82 2b       	or	r24, r18
 19e:	88 bb       	out	0x18, r24	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1a0:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
            break;
 1a2:	08 95       	ret
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
 1a4:	25 b3       	in	r18, 0x15	; 21
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_voidSetPinValue+0xcc>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_voidSetPinValue+0xc8>
 1b4:	82 2b       	or	r24, r18
 1b6:	85 bb       	out	0x15, r24	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1b8:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
            break;
 1ba:	08 95       	ret
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
 1bc:	22 b3       	in	r18, 0x12	; 18
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_voidSetPinValue+0xe4>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_voidSetPinValue+0xe0>
 1cc:	82 2b       	or	r24, r18
 1ce:	82 bb       	out	0x12, r24	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1d0:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
            break;
 1d2:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
            break;
        default:
            state = E_DIOValue;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
            break;
        default:
            state = E_DIOValue;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return state;
} /* DIO_voidSetPinValue */
 1de:	08 95       	ret

000001e0 <DIO_voidSetPinDirection>:
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    if (EN_Direction == INPUT)
 1e0:	41 11       	cpse	r20, r1
 1e2:	3c c0       	rjmp	.+120    	; 0x25c <DIO_voidSetPinDirection+0x7c>
    {
        switch (EN_port)
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	99 f0       	breq	.+38     	; 0x20e <DIO_voidSetPinDirection+0x2e>
 1e8:	28 f0       	brcs	.+10     	; 0x1f4 <DIO_voidSetPinDirection+0x14>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	e9 f0       	breq	.+58     	; 0x228 <DIO_voidSetPinDirection+0x48>
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	41 f1       	breq	.+80     	; 0x242 <DIO_voidSetPinDirection+0x62>
 1f2:	6e c0       	rjmp	.+220    	; 0x2d0 <DIO_voidSetPinDirection+0xf0>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
 1f4:	2a b3       	in	r18, 0x1a	; 26
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_voidSetPinDirection+0x20>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_voidSetPinDirection+0x1c>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 20a:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
 20c:	08 95       	ret
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
 20e:	27 b3       	in	r18, 0x17	; 23
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_voidSetPinDirection+0x3a>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_voidSetPinDirection+0x36>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 224:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
 226:	08 95       	ret
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
 228:	24 b3       	in	r18, 0x14	; 20
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_voidSetPinDirection+0x54>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_voidSetPinDirection+0x50>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 23e:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
 240:	08 95       	ret
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
 242:	21 b3       	in	r18, 0x11	; 17
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinDirection+0x6e>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinDirection+0x6a>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 258:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
 25a:	08 95       	ret
        default:
            state = E_DIODirec;
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	d1 f5       	brne	.+116    	; 0x2d4 <DIO_voidSetPinDirection+0xf4>
    {
        switch (EN_port)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	91 f0       	breq	.+36     	; 0x288 <DIO_voidSetPinDirection+0xa8>
 264:	28 f0       	brcs	.+10     	; 0x270 <DIO_voidSetPinDirection+0x90>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	d9 f0       	breq	.+54     	; 0x2a0 <DIO_voidSetPinDirection+0xc0>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	29 f1       	breq	.+74     	; 0x2b8 <DIO_voidSetPinDirection+0xd8>
 26e:	34 c0       	rjmp	.+104    	; 0x2d8 <DIO_voidSetPinDirection+0xf8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 270:	2a b3       	in	r18, 0x1a	; 26
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_voidSetPinDirection+0x9c>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_voidSetPinDirection+0x98>
 280:	82 2b       	or	r24, r18
 282:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 284:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
 286:	08 95       	ret
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 288:	27 b3       	in	r18, 0x17	; 23
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_voidSetPinDirection+0xb4>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_voidSetPinDirection+0xb0>
 298:	82 2b       	or	r24, r18
 29a:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 29c:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
 29e:	08 95       	ret
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 2a0:	24 b3       	in	r18, 0x14	; 20
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_voidSetPinDirection+0xcc>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_voidSetPinDirection+0xc8>
 2b0:	82 2b       	or	r24, r18
 2b2:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 2b4:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
 2b6:	08 95       	ret
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 2b8:	21 b3       	in	r18, 0x11	; 17
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_voidSetPinDirection+0xe4>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_voidSetPinDirection+0xe0>
 2c8:	82 2b       	or	r24, r18
 2ca:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 2cc:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
 2ce:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return state;
} /* DIO_voidSetPinDirection */
 2da:	08 95       	ret

000002dc <SPI_ENMasterInit>:
    }
    else
    {
        return 0;
    }
}
 2dc:	6c 9a       	sbi	0x0d, 4	; 13
 2de:	6b 98       	cbi	0x0d, 3	; 13
 2e0:	6a 98       	cbi	0x0d, 2	; 13
 2e2:	70 98       	cbi	0x0e, 0	; 14
 2e4:	68 98       	cbi	0x0d, 0	; 13
 2e6:	69 98       	cbi	0x0d, 1	; 13
 2e8:	6e 9a       	sbi	0x0d, 6	; 13
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	08 95       	ret

000002ee <SPI_voidSendData>:
 * 
 * @param data 
 */
void SPI_voidSendData(uint8_t data)
{
    SPDR = data;  
 2ee:	8f b9       	out	0x0f, r24	; 15
    while (!(GETBIT(SPSR, SPIF)));
 2f0:	77 9b       	sbis	0x0e, 7	; 14
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <SPI_voidSendData+0x2>
     
}
 2f4:	08 95       	ret

000002f6 <UART_ENInit>:
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
    UART_voidRXInterruptEnable();
    gPrece_str = Str;
}
 2f6:	80 b5       	in	r24, 0x20	; 32
 2f8:	8f 77       	andi	r24, 0x7F	; 127
 2fa:	80 bd       	out	0x20, r24	; 32
 2fc:	10 bc       	out	0x20, r1	; 32
 2fe:	83 e3       	ldi	r24, 0x33	; 51
 300:	89 b9       	out	0x09, r24	; 9
 302:	59 98       	cbi	0x0b, 1	; 11
 304:	80 b5       	in	r24, 0x20	; 32
 306:	80 68       	ori	r24, 0x80	; 128
 308:	80 bd       	out	0x20, r24	; 32
 30a:	80 b5       	in	r24, 0x20	; 32
 30c:	8f 7e       	andi	r24, 0xEF	; 239
 30e:	80 bd       	out	0x20, r24	; 32
 310:	80 b5       	in	r24, 0x20	; 32
 312:	8f 7d       	andi	r24, 0xDF	; 223
 314:	80 bd       	out	0x20, r24	; 32
 316:	80 b5       	in	r24, 0x20	; 32
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	80 bd       	out	0x20, r24	; 32
 31c:	80 b5       	in	r24, 0x20	; 32
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 bd       	out	0x20, r24	; 32
 322:	80 b5       	in	r24, 0x20	; 32
 324:	84 60       	ori	r24, 0x04	; 4
 326:	80 bd       	out	0x20, r24	; 32
 328:	52 98       	cbi	0x0a, 2	; 10
 32a:	54 9a       	sbi	0x0a, 4	; 10
 32c:	53 9a       	sbi	0x0a, 3	; 10
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret

00000332 <UART_u8ReceiveData>:
 332:	5f 9b       	sbis	0x0b, 7	; 11
 334:	fe cf       	rjmp	.-4      	; 0x332 <UART_u8ReceiveData>
 336:	8c b1       	in	r24, 0x0c	; 12
 338:	08 95       	ret

0000033a <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
 34a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gPsend_str>
 352:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <gPsend_str+0x1>
 356:	e8 0f       	add	r30, r24
 358:	f1 1d       	adc	r31, r1
 35a:	80 81       	ld	r24, Z
 35c:	88 23       	and	r24, r24
 35e:	39 f0       	breq	.+14     	; 0x36e <__vector_15+0x34>
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
    UDR = Data;
 360:	8c b9       	out	0x0c, r24	; 12
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    {
        UART_ENSendNoBlock(gPsend_str[i]);
        i++;
 362:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 36c:	05 c0       	rjmp	.+10     	; 0x378 <__vector_15+0x3e>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        gFlag = 1;
 374:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gFlag>
    }
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	8f 91       	pop	r24
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 39a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(uint8_t *Data)
{
    return UDR;
 39e:	9c b1       	in	r25, 0x0c	; 12
 * 
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 3a0:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <gPrece_str>
 3a4:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <gPrece_str+0x1>
 3a8:	e8 0f       	add	r30, r24
 3aa:	f1 1d       	adc	r31, r1
 3ac:	90 83       	st	Z, r25
    i++;
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
    if (i > 98)
 3b0:	83 36       	cpi	r24, 0x63	; 99
 3b2:	18 f4       	brcc	.+6      	; 0x3ba <__vector_13+0x32>
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
    i++;
 3b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <__vector_13+0x36>
    if (i > 98)
        i = 0;
 3ba:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <SER_SPIvoidInitPinMaster>:
void SER_SPIvoidInitPinSlave(void)
{
    DIO_voidSetPinDirection(PORT_B, PIN4, INPUT);
    DIO_voidSetPinDirection(PORT_B, PIN5, INPUT);
    DIO_voidSetPinDirection(PORT_B, PIN6, OUTPUT);
    DIO_voidSetPinDirection(PORT_B, PIN7, INPUT);
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_voidSetPinDirection>
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	65 e0       	ldi	r22, 0x05	; 5
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_voidSetPinDirection>
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	66 e0       	ldi	r22, 0x06	; 6
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_voidSetPinDirection>
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	67 e0       	ldi	r22, 0x07	; 7
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_voidSetPinDirection>
 3f8:	08 95       	ret

000003fa <SER_SPIvoidSendString>:
 * @brief Send String using SPI
 * 
 * @param PStr Address of the string to send
 */
void SER_SPIvoidSendString(uint8_t *PStr)
{
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	7c 01       	movw	r14, r24
    uint8_t i = 0;
    SPI_voidSendData(PStr[i]);
 406:	fc 01       	movw	r30, r24
 408:	80 81       	ld	r24, Z
 40a:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_voidSendData>
    while (PStr[i])
 40e:	f7 01       	movw	r30, r14
 410:	80 81       	ld	r24, Z
 412:	88 23       	and	r24, r24
 414:	61 f0       	breq	.+24     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 416:	10 e0       	ldi	r17, 0x00	; 0
    {
        i++;
 418:	1f 5f       	subi	r17, 0xFF	; 255
        SPI_voidSendData(PStr[i]);
 41a:	e7 01       	movw	r28, r14
 41c:	c1 0f       	add	r28, r17
 41e:	d1 1d       	adc	r29, r1
 420:	88 81       	ld	r24, Y
 422:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_voidSendData>
 */
void SER_SPIvoidSendString(uint8_t *PStr)
{
    uint8_t i = 0;
    SPI_voidSendData(PStr[i]);
    while (PStr[i])
 426:	88 81       	ld	r24, Y
 428:	81 11       	cpse	r24, r1
 42a:	f6 cf       	rjmp	.-20     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	e7 01       	movw	r28, r14
    {
        i++;
        SPI_voidSendData(PStr[i]);
    }
    PStr[i] = 0;
 430:	18 82       	st	Y, r1
}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	08 95       	ret

0000043e <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	7c 01       	movw	r14, r24
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
 44a:	0e 94 99 01 	call	0x332	; 0x332 <UART_u8ReceiveData>
 44e:	f7 01       	movw	r30, r14
 450:	80 83       	st	Z, r24
    while (Str[i] != '\r')
 452:	8d 30       	cpi	r24, 0x0D	; 13
 454:	61 f0       	breq	.+24     	; 0x46e <SER_UARTvoidReceiveString+0x30>
 456:	c0 e0       	ldi	r28, 0x00	; 0
    {
        i++;
 458:	cf 5f       	subi	r28, 0xFF	; 255
        Str[i] = UART_u8ReceiveData();
 45a:	87 01       	movw	r16, r14
 45c:	0c 0f       	add	r16, r28
 45e:	11 1d       	adc	r17, r1
 460:	0e 94 99 01 	call	0x332	; 0x332 <UART_u8ReceiveData>
 464:	f8 01       	movw	r30, r16
 466:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '\r')
 468:	8d 30       	cpi	r24, 0x0D	; 13
 46a:	b1 f7       	brne	.-20     	; 0x458 <SER_UARTvoidReceiveString+0x1a>
 46c:	01 c0       	rjmp	.+2      	; 0x470 <SER_UARTvoidReceiveString+0x32>
 46e:	87 01       	movw	r16, r14
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = 0;
 470:	f8 01       	movw	r30, r16
 472:	10 82       	st	Z, r1
}
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	08 95       	ret

00000480 <_exit>:
 480:	f8 94       	cli

00000482 <__stop_program>:
 482:	ff cf       	rjmp	.-2      	; 0x482 <__stop_program>

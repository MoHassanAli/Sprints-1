
SlaveSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001479  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a83  00000000  00000000  00001a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d19  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f0  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d4e  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004b46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "SPI_int.h"
#include "SER_UART_int.h"
#include "SER_SPI_int.h"
#define F_CPU 8000000UL
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	da 95       	dec	r29
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
    SER_SPIvoidInitPinSlave();
  a6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SER_SPIvoidInitPinSlave>

    DIO_voidSetPinDirection(PORT_D, PIN0, INPUT);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_D, PIN1, OUTPUT);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinDirection>

    UART_ENInit();
  be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_ENInit>
    SPI_ENSlaveInit();
  c2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_ENSlaveInit>
    uint8_t str[256];

    /* Replace with your application code */
    while (1)
    {
        SER_SPIvoidReceiveString(str);
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SER_SPIvoidReceiveString>
        SER_UARTvoidSendString(str);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 a1 01 	call	0x342	; 0x342 <SER_UARTvoidSendString>
  d6:	f7 cf       	rjmp	.-18     	; 0xc6 <main+0x34>

000000d8 <DIO_voidSetPinDirection>:
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    if (EN_Direction == INPUT)
  d8:	41 11       	cpse	r20, r1
  da:	3c c0       	rjmp	.+120    	; 0x154 <DIO_voidSetPinDirection+0x7c>
    {
        switch (EN_port)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	99 f0       	breq	.+38     	; 0x106 <DIO_voidSetPinDirection+0x2e>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_voidSetPinDirection+0x14>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	e9 f0       	breq	.+58     	; 0x120 <DIO_voidSetPinDirection+0x48>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	41 f1       	breq	.+80     	; 0x13a <DIO_voidSetPinDirection+0x62>
  ea:	6e c0       	rjmp	.+220    	; 0x1c8 <DIO_voidSetPinDirection+0xf0>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_voidSetPinDirection+0x20>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_voidSetPinDirection+0x1c>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 102:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
 104:	08 95       	ret
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_voidSetPinDirection+0x3a>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_voidSetPinDirection+0x36>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 11c:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
 11e:	08 95       	ret
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0x54>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0x50>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 136:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
 138:	08 95       	ret
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_voidSetPinDirection+0x6e>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_voidSetPinDirection+0x6a>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 150:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
 152:	08 95       	ret
        default:
            state = E_DIODirec;
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	d1 f5       	brne	.+116    	; 0x1cc <DIO_voidSetPinDirection+0xf4>
    {
        switch (EN_port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 f0       	breq	.+36     	; 0x180 <DIO_voidSetPinDirection+0xa8>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_voidSetPinDirection+0x90>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d9 f0       	breq	.+54     	; 0x198 <DIO_voidSetPinDirection+0xc0>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	29 f1       	breq	.+74     	; 0x1b0 <DIO_voidSetPinDirection+0xd8>
 166:	34 c0       	rjmp	.+104    	; 0x1d0 <DIO_voidSetPinDirection+0xf8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 168:	2a b3       	in	r18, 0x1a	; 26
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDirection+0x9c>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDirection+0x98>
 178:	82 2b       	or	r24, r18
 17a:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 17c:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
 17e:	08 95       	ret
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 180:	27 b3       	in	r18, 0x17	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinDirection+0xb4>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinDirection+0xb0>
 190:	82 2b       	or	r24, r18
 192:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 194:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
 196:	08 95       	ret
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPinDirection+0xcc>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPinDirection+0xc8>
 1a8:	82 2b       	or	r24, r18
 1aa:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1ac:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
 1ae:	08 95       	ret
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 1b0:	21 b3       	in	r18, 0x11	; 17
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPinDirection+0xe4>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPinDirection+0xe0>
 1c0:	82 2b       	or	r24, r18
 1c2:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1c4:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
 1c6:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return state;
} /* DIO_voidSetPinDirection */
 1d2:	08 95       	ret

000001d4 <SPI_ENSlaveInit>:
void SPI_voidSendData(uint8_t data)
{
    SPDR = data;  
    while (!(GETBIT(SPSR, SPIF)));
     
}
 1d4:	6c 98       	cbi	0x0d, 4	; 13
 1d6:	6e 9a       	sbi	0x0d, 6	; 13
 1d8:	08 95       	ret

000001da <SPI_u8ReceiveData>:
 * @return uint8_t 
 */
uint8_t SPI_u8ReceiveData(void)
{
    while (!(GETBIT(SPSR, SPIF)));  
    return SPDR;
 1da:	77 9b       	sbis	0x0e, 7	; 14
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <SPI_u8ReceiveData>
 1de:	8f b1       	in	r24, 0x0f	; 15
 1e0:	08 95       	ret

000001e2 <UART_ENInit>:
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
    UART_voidRXInterruptEnable();
    gPrece_str = Str;
}
 1e2:	80 b5       	in	r24, 0x20	; 32
 1e4:	8f 77       	andi	r24, 0x7F	; 127
 1e6:	80 bd       	out	0x20, r24	; 32
 1e8:	10 bc       	out	0x20, r1	; 32
 1ea:	83 e3       	ldi	r24, 0x33	; 51
 1ec:	89 b9       	out	0x09, r24	; 9
 1ee:	59 98       	cbi	0x0b, 1	; 11
 1f0:	80 b5       	in	r24, 0x20	; 32
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	80 bd       	out	0x20, r24	; 32
 1f6:	80 b5       	in	r24, 0x20	; 32
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	80 bd       	out	0x20, r24	; 32
 1fc:	80 b5       	in	r24, 0x20	; 32
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	80 bd       	out	0x20, r24	; 32
 202:	80 b5       	in	r24, 0x20	; 32
 204:	80 68       	ori	r24, 0x80	; 128
 206:	80 bd       	out	0x20, r24	; 32
 208:	80 b5       	in	r24, 0x20	; 32
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	80 bd       	out	0x20, r24	; 32
 20e:	80 b5       	in	r24, 0x20	; 32
 210:	84 60       	ori	r24, 0x04	; 4
 212:	80 bd       	out	0x20, r24	; 32
 214:	52 98       	cbi	0x0a, 2	; 10
 216:	54 9a       	sbi	0x0a, 4	; 10
 218:	53 9a       	sbi	0x0a, 3	; 10
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret

0000021e <UART_ENSendData>:
 21e:	5d 9b       	sbis	0x0b, 5	; 11
 220:	fe cf       	rjmp	.-4      	; 0x21e <UART_ENSendData>
 222:	8c b9       	out	0x0c, r24	; 12
 224:	08 95       	ret

00000226 <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
 236:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23a:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gPsend_str>
 23e:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <gPsend_str+0x1>
 242:	e8 0f       	add	r30, r24
 244:	f1 1d       	adc	r31, r1
 246:	80 81       	ld	r24, Z
 248:	88 23       	and	r24, r24
 24a:	39 f0       	breq	.+14     	; 0x25a <__vector_15+0x34>
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
    UDR = Data;
 24c:	8c b9       	out	0x0c, r24	; 12
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    {
        UART_ENSendNoBlock(gPsend_str[i]);
        i++;
 24e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 258:	05 c0       	rjmp	.+10     	; 0x264 <__vector_15+0x3e>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        gFlag = 1;
 260:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gFlag>
    }
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	8f 91       	pop	r24
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 286:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(uint8_t *Data)
{
    return UDR;
 28a:	9c b1       	in	r25, 0x0c	; 12
 * 
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 28c:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <gPrece_str>
 290:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <gPrece_str+0x1>
 294:	e8 0f       	add	r30, r24
 296:	f1 1d       	adc	r31, r1
 298:	90 83       	st	Z, r25
    i++;
 29a:	8f 5f       	subi	r24, 0xFF	; 255
    if (i > 98)
 29c:	83 36       	cpi	r24, 0x63	; 99
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <__vector_13+0x32>
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
    i++;
 2a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__vector_13+0x36>
    if (i > 98)
        i = 0;
 2a6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <SER_SPIvoidInitPinSlave>:
    {
		SPI_voidSendData(PStr[i]);
        i++;
    }
    PStr[i] = '\0';
}
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	64 e0       	ldi	r22, 0x04	; 4
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinDirection>
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	65 e0       	ldi	r22, 0x05	; 5
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinDirection>
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	66 e0       	ldi	r22, 0x06	; 6
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinDirection>
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	67 e0       	ldi	r22, 0x07	; 7
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinDirection>
 2e4:	08 95       	ret

000002e6 <SER_SPIvoidReceiveString>:
 * @brief Receive String using SPI
 * 
 * @param Str 
 */
void SER_SPIvoidReceiveString(uint8_t *Str)
{
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	6c 01       	movw	r12, r24
    uint8_t i = 0;
    Str[i] = SPI_u8ReceiveData();
 2f6:	0e 94 ed 00 	call	0x1da	; 0x1da <SPI_u8ReceiveData>
 2fa:	f6 01       	movw	r30, r12
 2fc:	80 83       	st	Z, r24
    while (Str[i] != '\r')
 2fe:	8d 30       	cpi	r24, 0x0D	; 13
 300:	71 f0       	breq	.+28     	; 0x31e <SER_SPIvoidReceiveString+0x38>
 302:	c0 e0       	ldi	r28, 0x00	; 0
    {
        i++;
 304:	cf 5f       	subi	r28, 0xFF	; 255
        Str[i] = SPI_u8ReceiveData();
 306:	0c 2f       	mov	r16, r28
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	76 01       	movw	r14, r12
 30c:	e0 0e       	add	r14, r16
 30e:	f1 1e       	adc	r15, r17
 310:	0e 94 ed 00 	call	0x1da	; 0x1da <SPI_u8ReceiveData>
 314:	f7 01       	movw	r30, r14
 316:	80 83       	st	Z, r24
 */
void SER_SPIvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = SPI_u8ReceiveData();
    while (Str[i] != '\r')
 318:	8d 30       	cpi	r24, 0x0D	; 13
 31a:	a1 f7       	brne	.-24     	; 0x304 <SER_SPIvoidReceiveString+0x1e>
 31c:	03 c0       	rjmp	.+6      	; 0x324 <SER_SPIvoidReceiveString+0x3e>
 31e:	76 01       	movw	r14, r12
 320:	00 e0       	ldi	r16, 0x00	; 0
 322:	10 e0       	ldi	r17, 0x00	; 0
    {
        i++;
        Str[i] = SPI_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = '\r';
 324:	8d e0       	ldi	r24, 0x0D	; 13
 326:	f7 01       	movw	r30, r14
 328:	80 83       	st	Z, r24
	Str[i+1] = '\0';
 32a:	f6 01       	movw	r30, r12
 32c:	e0 0f       	add	r30, r16
 32e:	f1 1f       	adc	r31, r17
 330:	11 82       	std	Z+1, r1	; 0x01
}
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	08 95       	ret

00000342 <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	fc 01       	movw	r30, r24
    uint8_t i = 0;
    while (Str[i])
 34a:	80 81       	ld	r24, Z
 34c:	88 23       	and	r24, r24
 34e:	59 f0       	breq	.+22     	; 0x366 <SER_UARTvoidSendString+0x24>
 350:	8f 01       	movw	r16, r30
 352:	c0 e0       	ldi	r28, 0x00	; 0
    {
        UART_ENSendData(Str[i]);
 354:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_ENSendData>
		i++;
 358:	cf 5f       	subi	r28, 0xFF	; 255
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    while (Str[i])
 35a:	f8 01       	movw	r30, r16
 35c:	ec 0f       	add	r30, r28
 35e:	f1 1d       	adc	r31, r1
 360:	80 81       	ld	r24, Z
 362:	81 11       	cpse	r24, r1
 364:	f7 cf       	rjmp	.-18     	; 0x354 <SER_UARTvoidSendString+0x12>
    {
        UART_ENSendData(Str[i]);
		i++;
    }
}
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>

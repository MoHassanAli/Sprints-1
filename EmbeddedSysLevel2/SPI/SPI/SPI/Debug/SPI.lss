
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c50  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fb  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075f  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005eb  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002b8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "DIO_Interface.h"
#include "SPI_int.h"
#include "SER_SPI_int.h"
int main(void)
{
    DIO_voidSetPinDirection(PORT_B, PIN4, OUTPUT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	64 e0       	ldi	r22, 0x04	; 4
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_B, PIN5, OUTPUT);
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	65 e0       	ldi	r22, 0x05	; 5
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_B, PIN6, INPUT);
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	66 e0       	ldi	r22, 0x06	; 6
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_B, PIN7, OUTPUT);
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	67 e0       	ldi	r22, 0x07	; 7
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_B, PIN7, LOW);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	67 e0       	ldi	r22, 0x07	; 7
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 55 00 	call	0xaa	; 0xaa <DIO_voidSetPinValue>
    SPI_ENMasterInit();
  9e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SPI_ENMasterInit>
	
	SPI_u8SendReceive('a');
  a2:	81 e6       	ldi	r24, 0x61	; 97
  a4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <SPI_u8SendReceive>
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x3c>

000000aa <DIO_voidSetPinValue>:
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    if (EN_Value == LOW)
  aa:	41 11       	cpse	r20, r1
  ac:	3c c0       	rjmp	.+120    	; 0x126 <DIO_voidSetPinValue+0x7c>
    {
        switch (EN_Port)
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	99 f0       	breq	.+38     	; 0xd8 <DIO_voidSetPinValue+0x2e>
  b2:	28 f0       	brcs	.+10     	; 0xbe <DIO_voidSetPinValue+0x14>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	e9 f0       	breq	.+58     	; 0xf2 <DIO_voidSetPinValue+0x48>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	41 f1       	breq	.+80     	; 0x10c <DIO_voidSetPinValue+0x62>
  bc:	6e c0       	rjmp	.+220    	; 0x19a <DIO_voidSetPinValue+0xf0>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
  be:	2b b3       	in	r18, 0x1b	; 27
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_voidSetPinValue+0x20>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_voidSetPinValue+0x1c>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8b bb       	out	0x1b, r24	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  d4:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_Port)
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
            break;
  d6:	08 95       	ret
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
  d8:	28 b3       	in	r18, 0x18	; 24
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_voidSetPinValue+0x3a>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_voidSetPinValue+0x36>
  e8:	80 95       	com	r24
  ea:	82 23       	and	r24, r18
  ec:	88 bb       	out	0x18, r24	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  ee:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
            break;
  f0:	08 95       	ret
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
  f2:	25 b3       	in	r18, 0x15	; 21
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_voidSetPinValue+0x54>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_voidSetPinValue+0x50>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	85 bb       	out	0x15, r24	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 108:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
            break;
 10a:	08 95       	ret
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
 10c:	22 b3       	in	r18, 0x12	; 18
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_voidSetPinValue+0x6e>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_voidSetPinValue+0x6a>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	82 bb       	out	0x12, r24	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 122:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
            break;
 124:	08 95       	ret
        default:
            state = E_DIOValue;
            break;
        }
    }
    else if (EN_Value == HIGH)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	d1 f5       	brne	.+116    	; 0x19e <DIO_voidSetPinValue+0xf4>
    {
        switch (EN_Port)
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 f0       	breq	.+36     	; 0x152 <DIO_voidSetPinValue+0xa8>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_voidSetPinValue+0x90>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_voidSetPinValue+0xc0>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	29 f1       	breq	.+74     	; 0x182 <DIO_voidSetPinValue+0xd8>
 138:	34 c0       	rjmp	.+104    	; 0x1a2 <DIO_voidSetPinValue+0xf8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
 13a:	2b b3       	in	r18, 0x1b	; 27
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_voidSetPinValue+0x9c>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_voidSetPinValue+0x98>
 14a:	82 2b       	or	r24, r18
 14c:	8b bb       	out	0x1b, r24	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 14e:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_Port)
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
            break;
 150:	08 95       	ret
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
 152:	28 b3       	in	r18, 0x18	; 24
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinValue+0xb4>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinValue+0xb0>
 162:	82 2b       	or	r24, r18
 164:	88 bb       	out	0x18, r24	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 166:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
            break;
 168:	08 95       	ret
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
 16a:	25 b3       	in	r18, 0x15	; 21
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinValue+0xcc>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinValue+0xc8>
 17a:	82 2b       	or	r24, r18
 17c:	85 bb       	out	0x15, r24	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 17e:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
            break;
 180:	08 95       	ret
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
 182:	22 b3       	in	r18, 0x12	; 18
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinValue+0xe4>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinValue+0xe0>
 192:	82 2b       	or	r24, r18
 194:	82 bb       	out	0x12, r24	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 196:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
            break;
 198:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
            break;
        default:
            state = E_DIOValue;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
            break;
        default:
            state = E_DIOValue;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return state;
} /* DIO_voidSetPinValue */
 1a4:	08 95       	ret

000001a6 <DIO_voidSetPinDirection>:
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    if (EN_Direction == INPUT)
 1a6:	41 11       	cpse	r20, r1
 1a8:	3c c0       	rjmp	.+120    	; 0x222 <DIO_voidSetPinDirection+0x7c>
    {
        switch (EN_port)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	99 f0       	breq	.+38     	; 0x1d4 <DIO_voidSetPinDirection+0x2e>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <DIO_voidSetPinDirection+0x14>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	e9 f0       	breq	.+58     	; 0x1ee <DIO_voidSetPinDirection+0x48>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	41 f1       	breq	.+80     	; 0x208 <DIO_voidSetPinDirection+0x62>
 1b8:	6e c0       	rjmp	.+220    	; 0x296 <DIO_voidSetPinDirection+0xf0>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
 1ba:	2a b3       	in	r18, 0x1a	; 26
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinDirection+0x20>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinDirection+0x1c>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1d0:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
 1d2:	08 95       	ret
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
 1d4:	27 b3       	in	r18, 0x17	; 23
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_voidSetPinDirection+0x3a>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_voidSetPinDirection+0x36>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 1ea:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
 1ec:	08 95       	ret
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
 1ee:	24 b3       	in	r18, 0x14	; 20
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinDirection+0x54>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinDirection+0x50>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 204:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
 206:	08 95       	ret
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
 208:	21 b3       	in	r18, 0x11	; 17
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_voidSetPinDirection+0x6e>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_voidSetPinDirection+0x6a>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 21e:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
 220:	08 95       	ret
        default:
            state = E_DIODirec;
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	d1 f5       	brne	.+116    	; 0x29a <DIO_voidSetPinDirection+0xf4>
    {
        switch (EN_port)
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	91 f0       	breq	.+36     	; 0x24e <DIO_voidSetPinDirection+0xa8>
 22a:	28 f0       	brcs	.+10     	; 0x236 <DIO_voidSetPinDirection+0x90>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	d9 f0       	breq	.+54     	; 0x266 <DIO_voidSetPinDirection+0xc0>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	29 f1       	breq	.+74     	; 0x27e <DIO_voidSetPinDirection+0xd8>
 234:	34 c0       	rjmp	.+104    	; 0x29e <DIO_voidSetPinDirection+0xf8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 236:	2a b3       	in	r18, 0x1a	; 26
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_voidSetPinDirection+0x9c>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_voidSetPinDirection+0x98>
 246:	82 2b       	or	r24, r18
 248:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 24a:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
 24c:	08 95       	ret
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 24e:	27 b3       	in	r18, 0x17	; 23
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_voidSetPinDirection+0xb4>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_voidSetPinDirection+0xb0>
 25e:	82 2b       	or	r24, r18
 260:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 262:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
 264:	08 95       	ret
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 266:	24 b3       	in	r18, 0x14	; 20
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_voidSetPinDirection+0xcc>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_voidSetPinDirection+0xc8>
 276:	82 2b       	or	r24, r18
 278:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 27a:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
 27c:	08 95       	ret
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 27e:	21 b3       	in	r18, 0x11	; 17
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_voidSetPinDirection+0xe4>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_voidSetPinDirection+0xe0>
 28e:	82 2b       	or	r24, r18
 290:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 292:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
 294:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_DIODirec;
 29e:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return state;
} /* DIO_voidSetPinDirection */
 2a0:	08 95       	ret

000002a2 <SPI_ENMasterInit>:
    /* Slave Select */
   CLRBIT(SPCR, MSTR);

    /* SPI Enable */
    SETBIT(SPCR, SPE);
}
 2a2:	6c 9a       	sbi	0x0d, 4	; 13
 2a4:	6b 98       	cbi	0x0d, 3	; 13
 2a6:	6a 98       	cbi	0x0d, 2	; 13
 2a8:	70 98       	cbi	0x0e, 0	; 14
 2aa:	68 98       	cbi	0x0d, 0	; 13
 2ac:	69 98       	cbi	0x0d, 1	; 13
 2ae:	6e 9a       	sbi	0x0d, 6	; 13
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	08 95       	ret

000002b4 <SPI_u8SendReceive>:
 * @param Data Send char
 * @return uint8_t Receive char
 */
uint8_t SPI_u8SendReceive(uint8_t Data)
{
    SPDR = Data;
 2b4:	8f b9       	out	0x0f, r24	; 15
    while (!GETBIT(SPSR, SPIF));
 2b6:	77 9b       	sbis	0x0e, 7	; 14
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <SPI_u8SendReceive+0x2>

    /* Flag will clear when read it */
    return SPDR;
 2ba:	8f b1       	in	r24, 0x0f	; 15
}
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>


UART_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000021e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6b  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000807  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b3  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d7  00000000  00000000  00002416  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000029ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "BIT_Math.h"
#include "UART_int.h"
#include "SER_UART_int.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	c4 56       	subi	r28, 0x64	; 100
  9c:	d1 09       	sbc	r29, r1
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
	
	UART_ENInit();
  a8:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_ENInit>

	
    while (1) 
    {

		SER_UARTvoidReceiveString(u8Str);
  ac:	ce 01       	movw	r24, r28
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SER_UARTvoidReceiveString>

		SER_UARTvoidSendString(u8Str);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <SER_UARTvoidSendString>
  bc:	f7 cf       	rjmp	.-18     	; 0xac <main+0x1a>

000000be <UART_ENInit>:
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
    UART_voidRXInterruptEnable();
    gPrece_str = Str;
}
  be:	80 b5       	in	r24, 0x20	; 32
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	10 bc       	out	0x20, r1	; 32
  c6:	83 e3       	ldi	r24, 0x33	; 51
  c8:	89 b9       	out	0x09, r24	; 9
  ca:	59 98       	cbi	0x0b, 1	; 11
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 bd       	out	0x20, r24	; 32
  d2:	80 b5       	in	r24, 0x20	; 32
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	80 bd       	out	0x20, r24	; 32
  d8:	80 b5       	in	r24, 0x20	; 32
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 bd       	out	0x20, r24	; 32
  de:	80 b5       	in	r24, 0x20	; 32
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	80 bd       	out	0x20, r24	; 32
  e4:	80 b5       	in	r24, 0x20	; 32
  e6:	8f 7d       	andi	r24, 0xDF	; 223
  e8:	80 bd       	out	0x20, r24	; 32
  ea:	80 b5       	in	r24, 0x20	; 32
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	80 bd       	out	0x20, r24	; 32
  f0:	80 b5       	in	r24, 0x20	; 32
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 bd       	out	0x20, r24	; 32
  f6:	80 b5       	in	r24, 0x20	; 32
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 bd       	out	0x20, r24	; 32
  fc:	52 98       	cbi	0x0a, 2	; 10
  fe:	54 9a       	sbi	0x0a, 4	; 10
 100:	53 9a       	sbi	0x0a, 3	; 10
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	08 95       	ret

00000106 <UART_ENSendData>:
 106:	5d 9b       	sbis	0x0b, 5	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <UART_ENSendData>
 10a:	8c b9       	out	0x0c, r24	; 12
 10c:	08 95       	ret

0000010e <UART_u8ReceiveData>:
 10e:	5f 9b       	sbis	0x0b, 7	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <UART_u8ReceiveData>
 112:	8c b1       	in	r24, 0x0c	; 12
 114:	08 95       	ret

00000116 <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gPsend_str>
 12e:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <gPsend_str+0x1>
 132:	e8 0f       	add	r30, r24
 134:	f1 1d       	adc	r31, r1
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	39 f0       	breq	.+14     	; 0x14a <__vector_15+0x34>
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
    UDR = Data;
 13c:	8c b9       	out	0x0c, r24	; 12
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    {
        UART_ENSendNoBlock(gPsend_str[i]);
        i++;
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	05 c0       	rjmp	.+10     	; 0x154 <__vector_15+0x3e>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        gFlag = 1;
 150:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gFlag>
    }
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 176:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(uint8_t *Data)
{
    return UDR;
 17a:	9c b1       	in	r25, 0x0c	; 12
 * 
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 17c:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <gPrece_str>
 180:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <gPrece_str+0x1>
 184:	e8 0f       	add	r30, r24
 186:	f1 1d       	adc	r31, r1
 188:	90 83       	st	Z, r25
    i++;
 18a:	8f 5f       	subi	r24, 0xFF	; 255
    if (i > 98)
 18c:	83 36       	cpi	r24, 0x63	; 99
 18e:	18 f4       	brcc	.+6      	; 0x196 <__vector_13+0x32>
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
    i++;
 190:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 194:	02 c0       	rjmp	.+4      	; 0x19a <__vector_13+0x36>
    if (i > 98)
        i = 0;
 196:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	fc 01       	movw	r30, r24
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	59 f0       	breq	.+22     	; 0x1d0 <SER_UARTvoidSendString+0x24>
 1ba:	8f 01       	movw	r16, r30
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
    {
        UART_ENSendData(Str[i]);
 1be:	0e 94 83 00 	call	0x106	; 0x106 <UART_ENSendData>
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
 1c2:	cf 5f       	subi	r28, 0xFF	; 255
 1c4:	f8 01       	movw	r30, r16
 1c6:	ec 0f       	add	r30, r28
 1c8:	f1 1d       	adc	r31, r1
 1ca:	80 81       	ld	r24, Z
 1cc:	81 11       	cpse	r24, r1
 1ce:	f7 cf       	rjmp	.-18     	; 0x1be <SER_UARTvoidSendString+0x12>
    {
        UART_ENSendData(Str[i]);
    }
    // UART_ENSendData('#');
}
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	7c 01       	movw	r14, r24
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
 1e4:	0e 94 87 00 	call	0x10e	; 0x10e <UART_u8ReceiveData>
 1e8:	f7 01       	movw	r30, r14
 1ea:	80 83       	st	Z, r24
    while (Str[i] != '#')
 1ec:	83 32       	cpi	r24, 0x23	; 35
 1ee:	61 f0       	breq	.+24     	; 0x208 <SER_UARTvoidReceiveString+0x30>
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
    {
        i++;
 1f2:	cf 5f       	subi	r28, 0xFF	; 255
        Str[i] = UART_u8ReceiveData();
 1f4:	87 01       	movw	r16, r14
 1f6:	0c 0f       	add	r16, r28
 1f8:	11 1d       	adc	r17, r1
 1fa:	0e 94 87 00 	call	0x10e	; 0x10e <UART_u8ReceiveData>
 1fe:	f8 01       	movw	r30, r16
 200:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '#')
 202:	83 32       	cpi	r24, 0x23	; 35
 204:	b1 f7       	brne	.-20     	; 0x1f2 <SER_UARTvoidReceiveString+0x1a>
 206:	01 c0       	rjmp	.+2      	; 0x20a <SER_UARTvoidReceiveString+0x32>
 208:	87 01       	movw	r16, r14
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = '\0';
 20a:	f8 01       	movw	r30, r16
 20c:	10 82       	st	Z, r1
}
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>

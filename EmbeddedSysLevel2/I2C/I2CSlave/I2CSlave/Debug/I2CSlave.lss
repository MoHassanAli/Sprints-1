
I2CSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8e  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073d  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a5  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000578  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000668  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "DIO_Interface.h"
#include "I2C_int.h"

int main(void)
{
	DIO_voidSetPortDirection(PORT_A, PRTOUTPUT);
  6c:	6f ef       	ldi	r22, 0xFF	; 255
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_voidSetPortDirection>
    I2C_voidInitSlave();
  74:	0e 94 71 00 	call	0xe2	; 0xe2 <I2C_voidInitSlave>
	 I2C_u8ReceiveACK();
  78:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_u8ReceiveACK>
	uint8_t x = I2C_u8ReceiveACK();
  7c:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_u8ReceiveACK>
	DIO_voidSetPortValue(PORT_A, x);
  80:	68 2f       	mov	r22, r24
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 45 00 	call	0x8a	; 0x8a <DIO_voidSetPortValue>
  88:	ff cf       	rjmp	.-2      	; 0x88 <main+0x1c>

0000008a <DIO_voidSetPortValue>:
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
    switch (EN_Port)
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	49 f0       	breq	.+18     	; 0xa0 <DIO_voidSetPortValue+0x16>
  8e:	28 f0       	brcs	.+10     	; 0x9a <DIO_voidSetPortValue+0x10>
  90:	82 30       	cpi	r24, 0x02	; 2
  92:	49 f0       	breq	.+18     	; 0xa6 <DIO_voidSetPortValue+0x1c>
  94:	83 30       	cpi	r24, 0x03	; 3
  96:	51 f0       	breq	.+20     	; 0xac <DIO_voidSetPortValue+0x22>
  98:	0c c0       	rjmp	.+24     	; 0xb2 <DIO_voidSetPortValue+0x28>
    {
    case PORT_A:
        PORTA = EN_Value;
  9a:	6b bb       	out	0x1b, r22	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  9c:	84 e0       	ldi	r24, 0x04	; 4
    switch (EN_Port)
    {
    case PORT_A:
        PORTA = EN_Value;
        break;
  9e:	08 95       	ret
    case PORT_B:
        PORTB = EN_Value;
  a0:	68 bb       	out	0x18, r22	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  a2:	84 e0       	ldi	r24, 0x04	; 4
    case PORT_A:
        PORTA = EN_Value;
        break;
    case PORT_B:
        PORTB = EN_Value;
        break;
  a4:	08 95       	ret
    case PORT_C:
        PORTC = EN_Value;
  a6:	65 bb       	out	0x15, r22	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  a8:	84 e0       	ldi	r24, 0x04	; 4
    case PORT_B:
        PORTB = EN_Value;
        break;
    case PORT_C:
        PORTC = EN_Value;
        break;
  aa:	08 95       	ret
    case PORT_D:
        PORTD = EN_Value;
  ac:	62 bb       	out	0x12, r22	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  ae:	84 e0       	ldi	r24, 0x04	; 4
    case PORT_C:
        PORTC = EN_Value;
        break;
    case PORT_D:
        PORTD = EN_Value;
        break;
  b0:	08 95       	ret
    default:
        state = E_DIOPORT;
  b2:	82 e0       	ldi	r24, 0x02	; 2
        break;
    }
    return state;
} /* DIO_voidSetPortValue */
  b4:	08 95       	ret

000000b6 <DIO_voidSetPortDirection>:
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;

    switch (EN_Port)
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	49 f0       	breq	.+18     	; 0xcc <DIO_voidSetPortDirection+0x16>
  ba:	28 f0       	brcs	.+10     	; 0xc6 <DIO_voidSetPortDirection+0x10>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	49 f0       	breq	.+18     	; 0xd2 <DIO_voidSetPortDirection+0x1c>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	51 f0       	breq	.+20     	; 0xd8 <DIO_voidSetPortDirection+0x22>
  c4:	0c c0       	rjmp	.+24     	; 0xde <DIO_voidSetPortDirection+0x28>
    {
    case PORT_A:
        DDRA = EN_Direction;
  c6:	6a bb       	out	0x1a, r22	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  c8:	84 e0       	ldi	r24, 0x04	; 4

    switch (EN_Port)
    {
    case PORT_A:
        DDRA = EN_Direction;
        break;
  ca:	08 95       	ret
    case PORT_B:
        DDRB = EN_Direction;
  cc:	67 bb       	out	0x17, r22	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  ce:	84 e0       	ldi	r24, 0x04	; 4
    case PORT_A:
        DDRA = EN_Direction;
        break;
    case PORT_B:
        DDRB = EN_Direction;
        break;
  d0:	08 95       	ret
    case PORT_C:
        DDRC = EN_Direction;
  d2:	64 bb       	out	0x14, r22	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  d4:	84 e0       	ldi	r24, 0x04	; 4
    case PORT_B:
        DDRB = EN_Direction;
        break;
    case PORT_C:
        DDRC = EN_Direction;
        break;
  d6:	08 95       	ret
    case PORT_D:
        DDRD = EN_Direction;
  d8:	61 bb       	out	0x11, r22	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
  da:	84 e0       	ldi	r24, 0x04	; 4
    case PORT_C:
        DDRC = EN_Direction;
        break;
    case PORT_D:
        DDRD = EN_Direction;
        break;
  dc:	08 95       	ret
    default:
        state = E_DIOPORT;
  de:	82 e0       	ldi	r24, 0x02	; 2
        break;
    }
    return state;

} /* DIO_voidSetPortDirection */
  e0:	08 95       	ret

000000e2 <I2C_voidInitSlave>:
   SETBIT(TWCR, TWSTO);
   SETBIT(TWCR, TWINT);

   while (!(GETBIT(TWCR, TWINT)))
      ;
}
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	80 b9       	out	0x00, r24	; 0
  e6:	81 b1       	in	r24, 0x01	; 1
  e8:	8c 7f       	andi	r24, 0xFC	; 252
  ea:	81 b9       	out	0x01, r24	; 1
  ec:	81 b1       	in	r24, 0x01	; 1
  ee:	81 b9       	out	0x01, r24	; 1
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	82 b9       	out	0x02, r24	; 2
  f4:	86 b7       	in	r24, 0x36	; 54
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	86 bf       	out	0x36, r24	; 54
  fa:	08 95       	ret

000000fc <I2C_u8ReceiveACK>:

uint8_t I2C_u8ReceiveACK(void)
{
   /* Enable ACK */
   SETBIT(TWCR, TWEA);
  fc:	86 b7       	in	r24, 0x36	; 54
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	86 bf       	out	0x36, r24	; 54
   /* CLR TWI Flag*/
   SETBIT(TWCR, TWINT);
 102:	86 b7       	in	r24, 0x36	; 54
 104:	80 68       	ori	r24, 0x80	; 128
 106:	86 bf       	out	0x36, r24	; 54

   while (!(GETBIT(TWCR, TWINT)))
 108:	06 b6       	in	r0, 0x36	; 54
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <I2C_u8ReceiveACK+0xc>
      ;
   return TWDR;
 10e:	83 b1       	in	r24, 0x03	; 3
}
 110:	08 95       	ret

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>


I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000787  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a6  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "DIO_Interface.h"
#include "I2C_int.h"

int main(void)
{
    I2C_voidInitMaster();
  6c:	0e 94 41 00 	call	0x82	; 0x82 <I2C_voidInitMaster>
    I2C_voidMasterStart(2);
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_voidMasterStart>
    I2C_voidSendData('a');
  76:	81 e6       	ldi	r24, 0x61	; 97
  78:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_voidSendData>
    I2C_voidMasterStop();
  7c:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_voidMasterStop>
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x14>

00000082 <I2C_voidInitMaster>:
   SETBIT(TWCR, TWINT);

   while (!(GETBIT(TWCR, TWINT)))
      ;
   return TWDR;
}
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	80 b9       	out	0x00, r24	; 0
  86:	81 b1       	in	r24, 0x01	; 1
  88:	8c 7f       	andi	r24, 0xFC	; 252
  8a:	81 b9       	out	0x01, r24	; 1
  8c:	81 b1       	in	r24, 0x01	; 1
  8e:	81 b9       	out	0x01, r24	; 1
  90:	86 b7       	in	r24, 0x36	; 54
  92:	84 60       	ori	r24, 0x04	; 4
  94:	86 bf       	out	0x36, r24	; 54
  96:	86 b7       	in	r24, 0x36	; 54
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	08 95       	ret

0000009e <I2C_voidMasterStop>:
  9e:	86 b7       	in	r24, 0x36	; 54
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	86 bf       	out	0x36, r24	; 54
  a4:	86 b7       	in	r24, 0x36	; 54
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	86 bf       	out	0x36, r24	; 54
  aa:	06 b6       	in	r0, 0x36	; 54
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <I2C_voidMasterStop+0xc>
  b0:	08 95       	ret

000000b2 <I2C_voidSendData>:
  b2:	83 b9       	out	0x03, r24	; 3
  b4:	86 b7       	in	r24, 0x36	; 54
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	86 bf       	out	0x36, r24	; 54
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <I2C_voidSendData+0x8>
  c0:	08 95       	ret

000000c2 <CheckStatus>:



EN_ErrorI2c_t CheckStatus(uint8_t status)
{
   if (status != (TWSR & 0XF8))
  c2:	21 b1       	in	r18, 0x01	; 1
  c4:	28 7f       	andi	r18, 0xF8	; 248
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	48 2f       	mov	r20, r24
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	24 17       	cp	r18, r20
  d0:	35 07       	cpc	r19, r21
  d2:	09 f0       	breq	.+2      	; 0xd6 <CheckStatus+0x14>
  d4:	80 e0       	ldi	r24, 0x00	; 0
   }
   else
   {
      return E_OK;
   }
  d6:	08 95       	ret

000000d8 <I2C_voidMasterStart>:
 * @brief Send Start condition 
 * Enable TWI And TWEN 
 *    
 */
EN_ErrorI2c_t I2C_voidMasterStart(uint8_t SlaveAddress)
{
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
   /* Start Condition */
   /* Becmome a master */
   SETBIT(TWCR, TWSTA);
  dc:	86 b7       	in	r24, 0x36	; 54
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	86 bf       	out	0x36, r24	; 54
   /* CLR TWI Flag*/
   SETBIT(TWCR, TWINT);
  e2:	86 b7       	in	r24, 0x36	; 54
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	86 bf       	out	0x36, r24	; 54

   /* wait to CLR TWI Flag */
   while (!(GETBIT(TWCR, TWINT)))
  e8:	06 b6       	in	r0, 0x36	; 54
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <I2C_voidMasterStart+0x10>
      ;
   if (CheckStatus(0x08) == E_ERROR)
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	0e 94 61 00 	call	0xc2	; 0xc2 <CheckStatus>
  f4:	98 2f       	mov	r25, r24
  f6:	88 23       	and	r24, r24
  f8:	a1 f0       	breq	.+40     	; 0x122 <I2C_voidMasterStart+0x4a>
   {
      return E_ERROR;
   }
   TWDR = ((SlaveAddress - 1) << 1);
  fa:	c1 50       	subi	r28, 0x01	; 1
  fc:	cc 0f       	add	r28, r28
  fe:	c3 b9       	out	0x03, r28	; 3

   CLRBIT(TWDR, 0);
 100:	18 98       	cbi	0x03, 0	; 3
   /* CLR TWI Flag*/
   SETBIT(TWCR, TWINT);
 102:	86 b7       	in	r24, 0x36	; 54
 104:	80 68       	ori	r24, 0x80	; 128
 106:	86 bf       	out	0x36, r24	; 54
   /* CLR Start Condition */
   CLRBIT(TWCR, TWSTA);
 108:	86 b7       	in	r24, 0x36	; 54
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	86 bf       	out	0x36, r24	; 54

   while (!(GETBIT(TWCR, TWINT)))
 10e:	06 b6       	in	r0, 0x36	; 54
 110:	07 fe       	sbrs	r0, 7
 112:	fd cf       	rjmp	.-6      	; 0x10e <I2C_voidMasterStart+0x36>
      ;
   if (CheckStatus(0x18) == E_ERROR)
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	0e 94 61 00 	call	0xc2	; 0xc2 <CheckStatus>
   /* wait to CLR TWI Flag */
   while (!(GETBIT(TWCR, TWINT)))
      ;
   if (CheckStatus(0x08) == E_ERROR)
   {
      return E_ERROR;
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	81 11       	cpse	r24, r1
 11e:	01 c0       	rjmp	.+2      	; 0x122 <I2C_voidMasterStart+0x4a>
 120:	90 e0       	ldi	r25, 0x00	; 0
   {
      return E_ERROR;
   }

   return E_OK;
}
 122:	89 2f       	mov	r24, r25
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
